<?xml version="1.0" encoding="utf-8"?>
<j:ResponsiveView xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:js="library://ns.apache.org/royale/basic"
    xmlns:html="library://ns.apache.org/royale/html"
    xmlns:vos="com.proj.example.vos.*"
	xmlns:models="com.proj.example.models.*"
    xmlns:echartmodel="com.proj.example.echarts.models.*"
    xmlns:localchart="com.proj.example.charts.*" 
    xmlns:views="com.proj.example.views.*" 
    initComplete="onInitComplete()"
    >

     <fx:Script>
        <![CDATA[
        import com.proj.example.vos.TabBarChartVO;
        import org.apache.royale.jewel.supportClasses.ISelectableContent;
        import com.proj.example.charts.IEchartDefinitionTemplate;
        import com.proj.example.echarts.vos.EChartsThemeTemplateVO;
        import com.proj.example.echarts.models.EChartsModel;
        import com.proj.example.echarts.events.EChartsEvent;
            
        [Bindable]
        [Inject(source="echartsModel", required="true")]
        public var echartsModel:EChartsModel;

        [PostConstruct]
        public function setUpCrux():void 
        {            
            trace("setUpCrux");
            var evt:EChartsEvent = new EChartsEvent(EChartsEvent.ON_INICIALIZE);
            evt.withThemesSupport = true;
            dispatchEvent(evt);
        }
          
        [EventHandler(event="EChartsEvent.ON_AFTERINICIALIZE", scope="global")]
        public function echartsAfterInitEvent(event:EChartsEvent):void
        {                 
            //load the charts
            trace("echartsAfterInitEvent");  
            
            main.selectedContent = "welcome";
            listTheme.selectedIndex = 0;
			//ecp1.initInstance(listTheme.selectedItem.themeName);
            //ecp2.initInstance(listTheme.selectedItem.themeName);
        }

        private function onInitComplete():void{            
			//window.addEventListener('resize', autoResizeHandler, false);
            this.addEventListener("sizeChanged", autoResizeHandler);
            trace(topappbar.height.toString());   
        }

        [Bindable]
        public function get offsetTopBar():Number{
            return topappbar.element.clientHeight + (topappbar.element.clientTop * 2);
        }

		public function autoResizeHandler(event:Event = null):void
        {
            selectedChart();
        }

        public function selectedChart():void
        {            
            var it:TabBarChartVO = (tabbarApp.selectedItem as TabBarChartVO);
            if(!it){
                main.selectedContent = "welcome";
            }else{
                main.selectedContent= it.hash;                                
				for (var i:int = 0; i < main.numElements; i++)
				{
					var content:ISelectableContent = main.getElementAt(i) as ISelectableContent;
					if(content.isSelected){                        
                        if(content is IEchartDefinitionTemplate){
                            var cchart:IEchartDefinitionTemplate = content as IEchartDefinitionTemplate;
                            if(cchart && cchart.chartComponent){
                                //if(cchart.itemChartDef.themeName != currentTheme.themeName)
                                cchart.chartComponent.resize();
                            }
                        }
                        return;
                    }
				}
            }

        }

        private var _currentTheme:EChartsThemeTemplateVO;
        [Bindable]
		public function get currentTheme():EChartsThemeTemplateVO{
            return _currentTheme; 
        }
		public function set currentTheme(value:EChartsThemeTemplateVO):void
        {
            if(_currentTheme === value)
                return;
            _currentTheme = value;
        }

        public function theme_Change():void
        {            
            if(_currentTheme && _currentTheme.themeName == listTheme.selectedItem.themeName)
                return;
            if( !listTheme.selectedItem.isReg )
            {
                //cargar y registrar
            }
            else
            {
                //aplicar tema
            }
			ecp1.initInstance(listTheme.selectedItem.themeName);
            //ecp2.initInstance(listTheme.selectedItem.themeName);
        }

        ]]>
    </fx:Script>

	<fx:Style>
		.side-tab-content {
			background-color: #f6f6f6;
		}
	</fx:Style>

	<j:model>
		<models:ChartsModel localId="appModel"/>
	</j:model>

    <j:beads>
		<js:ContainerDataBinding/>
		<js:BrowserResizeListener/>
	</j:beads>

    <j:TopAppBar localId="topappbar" fixed="true" visible="true">
        <j:BarRow localId="barRowHeader">
            <j:BarSection gap="0" percentWidth="100">
                <j:BarTitle text="Integrating Apache ECharts (Incumbating) into Apache Royale"/>
            </j:BarSection>
        </j:BarRow>
        <j:BarRow localId="barRowContent" style ="height:auto;">
            <j:HGroup gap="0" percentWidth="100" itemsHorizontalAlign="itemsCenter" itemsVerticalAlign="itemsCenter">
                <j:TabBar id="tabbarApp" selectedIndex="-1" sameWidths="true"
                    className="tabbarAppItemRenderer"
                    change="selectedChart()" dataProvider="{appModel.tabBarAppData}">
                </j:TabBar>
            </j:HGroup>
        </j:BarRow>
        <j:BarRow localId="barRowConfig" style ="height:auto;">
            <j:HGroup gap="0" itemsVerticalAlign="itemsCenter">                
                <views:SelectThemeList id="listTheme" change="theme_Change()"/>
            </j:HGroup>
        </j:BarRow>
    </j:TopAppBar>

    <j:ApplicationMainContent  localId="main" hasTopAppBar="true" selectedContent="welcome">
        <views:WelcomeSection name="welcome"/>
        <views:EChartsTemplate localId="ecp1" name="ecp1" style="padding-top:{offsetTopBar}px;" itemChartDef="{appModel.ECCT_PIE001}"/>
        <!--<views:EChartsTemplate localId="ecp2" name="ecp2" style="margin-top:{offsetTopBar}px;"  itemChartDef="{appModel.ECC_PIE002}"/>-->
    </j:ApplicationMainContent>
    

</j:ResponsiveView>