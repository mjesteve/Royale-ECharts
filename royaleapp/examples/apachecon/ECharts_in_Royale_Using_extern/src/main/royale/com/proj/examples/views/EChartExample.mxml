<?xml version="1.0" encoding="utf-8"?>
<j:ScrollableSectionContent xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:js="library://ns.apache.org/royale/basic"
    xmlns:html="library://ns.apache.org/royale/html"
    initComplete="onInitComplete()"
    >

     <fx:Script>
        <![CDATA[
        import org.apache.royale.collections.ArrayList;

        private function onInitComplete():void{            
			window.addEventListener('resize', autoResizeHandler, false);
        }

        private var mychart:Object;

		public function autoResizeHandler(event:Event = null):void
        {
            if(mychart)
                mychart.resize({width: 'auto', height: 'auto'});
        }


        private var _dataProvList:ArrayList;
        [Bindable]
        public function get dataProvList():ArrayList
        {
            if(_dataProvList)
                return dataProvList;

            var ar:Array = new Array();
            
            var it:Object = new Object();
            it.contador = 10;
            it.descontador = "10 - Diez Horas";
            it.tpersonal = it.tpersonalminutes = 240;
            it.acum = it.acumminutes = 120;
            it.saldo = it.saldominutes = 120;
            it.tpersonaltxt = "4:00";
            it.acumtxt = "2:00";
            it.saldotxt = "2:00";

            it.tpersonalpercentage = 100;
            it.acumpercentage = 50;
            it.saldopercentage = 50;
            ar.push(it);
            
            it = new Object();
            it.contador = 11;
            it.descontador = "11 - Once Dias";
            it.tpersonal = 24;
            it.tpersonalminutes = 24*1440;
            it.acum = 6;
            it.acumminutes = 6 * 1440;
            it.saldo = 18;
            it.saldominutes = 18 * 1440;
            it.tpersonaltxt = "24";
            it.acumtxt = "6";
            it.saldotxt = "18";

            it.tpersonalpercentage = 100;
            it.acumpercentage = 25;
            it.saldopercentage = 75;
            ar.push(it);
            
            _dataProvList = new ArrayList(ar);
            return _dataProvList;
        }

        private var iteration:uint=0;

        private function loadChart(ownerName:String):void
        {            
            //var mychart:Object = echarts.init(charTopesPerGen.element);'light', 'dark'
            if(!mychart)
                mychart = echarts.init(charTopesPerGen.element);
            else
                mychart.clear();
			var option:Object;
            
            if(iteration > 3)
                iteration = 0;

            if (iteration == 0){
                option = {
                    legend: {
                        data: [{name: 'Tope',icon: 'square'},{name: 'Acumulado',icon: 'square'}],
                        left: 'center',
                        top: 0,
                        bottom: 20,
                        itemGap: 20,
                        itemWidth: 20, itemHeight: 20,
                        textStyle:{color: '#000000', fontStyle:'normal',fontSize:'10',fontFamily:'Open Sans'}
                    },
                    tooltip: {trigger:'axis',
                        axisPointer:{type: 'shadow'}, snap: true, alwaysShowContent: false, appendToBody: true,
                        padding: [10,15,10,15],
                        textStyle: {fontStyle:'normal',fontSize:11, fontWeight:'bold', fontFamily:'Open Sans'}
                    },
                    grid: {containLabel: true, left: 15},
                    dataset: {
                        dimensions: ['descontador', 'tpersonalpertentage', 'acumpertentage', 'tpersonaltxt', 'acumtxt'],
                        source: [
                            {descontador: '150 - Días de Asuntos Propios', tpersonalpertentage: 100, acumpertentage: 0, 
                            tpersonaltxt: '9', acumtxt: '0 (0%)'},
                            {descontador: '120 - Días de Vacaciones (laborales)', tpersonalpertentage: 100, acumpertentage: 9, 
                            tpersonaltxt: '22', acumtxt: '2 (9%)'},
                            {descontador: '106 - Horas Extras Extructurales', tpersonalpertentage: 100, acumpertentage: 70, 
                            tpersonaltxt: '10:00', acumtxt: '7:00 (70%)'},
                            {descontador: '105 - Descanso / Fumar / wc', tpersonalpertentage: 100, acumpertentage: 133, 
                            tpersonaltxt: '0:15', acumtxt: '0:20 (133%)'}
                        ]
                    },
                    yAxis: {name: 'Contador/Concepto',
                            nameTextStyle:{color: '#000000', fontStyle:'normal',fontSize:11,fontWeight:700, fontFamily:'Open Sans'},
                            type: 'category',
                            position: 'left', offset: 15,
                            axisTick: {show: true, alignWithLabel: true, inside: false, length:5},
                            axisLabel: {color: '#000000', fontStyle:'normal',fontSize:11, fontFamily:'Open Sans',
                                verticalAlign: 'middle'
                            },
                            splitArea: {show: false}
                    },
                    xAxis: {name: '(%)',
                            nameTextStyle:{color: '#000000', fontStyle:'normal',fontSize:11,fontWeight:700,fontFamily:'Open Sans'},
                            type: 'value',
                            position: 'right', offset: 0,
                            axisTick: {show: true, alignWithLabel: true, inside: false, length:5},
                            axisLabel: {color: '#000000', fontStyle:'normal',fontSize:'11', fontFamily:'Open Sans',
                                verticalAlign: 'top', padding: [10,10,10,10], formatter: '{value} %',
                                textStyle: {color: function(value,index){  return value <=100 ? 'green':'red'; } }
                            }, minInterval: 1, maxInterval:25
                    },
                    series: [
                        {name: 'Tope', type: 'bar', barMaxWidth: '40%',
                        label: {show: true, formatter: '{@[3]}',
                                color: '#000000',fontStyle:'normal', fontSize:11, fontWeight:'bold', fontFamily:'Open Sans'},
                        itemStyle: {color: '#ffb248'}
                        },
                        {name: 'Acumulado', type: 'bar', barMaxWidth: '40%', barGap:'1%', barCategoryGap: 5,
                        label: {show: true, formatter: '{@[4]}',
                                fontStyle: 'normal',fontSize: 11, fontWeight: 'bold', fontFamily: 'Open Sans'},
                        itemStyle: {color: '#747474'}
                        }
                    ]
                };

            }else if(iteration == 1)
            {
                option = {
                title: {
                    text:'The total population of the world',
                    subtext:'Data comes from the network'
                },
                tooltip: {
                    trigger:'axis',
                    axisPointer: {
                        type:'shadow'
                    }
                },
                legend: {
                    data: ['2011', '2012']
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    type:'value',
                    boundaryGap: [0, 0.01]
                },
                yAxis: {
                    type:'category',
                    data: ['Brazil','Indonesia','United States','India','China','World population (ten thousand)']
                },
                series: [
                    {
                        name: '2011',
                        type:'bar',
                        data: [18203, 23489, 29034, 104970, 131744, 630230]
                    },
                    {
                        name: '2012',
                        type:'bar',
                        data: [19325, 23438, 31000, 121594, 134141, 681807]
                    }
                ]
                };
            }else if(iteration == 2)
            {
                option = {
                    series : [
                        {
                            name: 'Reference Page',
                            type: 'pie',
                            radius: '55%',
                            data:[
                                {value:400, name:'Searching Engine'},
                                {value:335, name:'Direct'},
                                {value:310, name:'Email'},
                                {value:274, name:'Alliance Advertisement'},
                                {value:235, name:'Video Advertisement'}
                            ]
                        }
                    ]
                };
            }else if(iteration == 3)
            {
                option = {
                tooltip: {
                    trigger:'axis',
                    axisPointer: {// axis indicator, axis trigger is valid
                        type:'shadow' // The default is a straight line, optional:'line' |'shadow'
                    }
                },
                legend: {
                    data: ['Direct Access','Email Marketing','Affiliate Advertising','Video Advertising','Search Engine']
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    type:'value'
                },
                yAxis: {
                    type:'category',
                    data: ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
                },
                series: [
                    {
                        name:'Direct access',
                        type:'bar',
                        stack:'Total',
                        label: {
                            show: true,
                            position:'insideRight'
                        },
                        data: [320, 302, 301, 334, 390, 330, 320]
                    },
                    {
                        name:'Mail Marketing',
                        type:'bar',
                        stack:'Total',
                        label: {
                            show: true,
                            position:'insideRight'
                        },
                        data: [120, 132, 101, 134, 90, 230, 210]
                    },
                    {
                        name:'Affiliate Advertising',
                        type:'bar',
                        stack:'Total',
                        label: {
                            show: true,
                            position:'insideRight'
                        },
                        data: [220, 182, 191, 234, 290, 330, 310]
                    },
                    {
                        name:'Video ads',
                        type:'bar',
                        stack:'Total',
                        label: {
                            show: true,
                            position:'insideRight'
                        },
                        data: [150, 212, 201, 154, 190, 330, 410]
                    },
                    {
                        name:'Search Engine',
                        type:'bar',
                        stack:'Total',
                        label: {
                            show: true,
                            position:'insideRight'
                        },
                        data: [820, 832, 901, 934, 1290, 1330, 1320]
                    }
                ]
            };
            }
            iteration+=1;
            mychart.setOption(option, true);
            mychart.resize({width: 'auto', height: 'auto'})
        }

        ]]>
    </fx:Script>

    <j:beads>
		<js:ContainerDataBinding/>
	</j:beads>

            <j:Grid gap="true" width="100%" height="100%">
                         
                <j:GridCell desktopNumerator="1" desktopDenominator="1" tabletNumerator="1" tabletDenominator="1" phoneNumerator="1" phoneDenominator="1">
                    <j:HGroup id="charTopesPerGen" width="100%" height="100%" itemsVerticalAlign="itemsTop"/>
                </j:GridCell>

            </j:Grid>


</j:ScrollableSectionContent>